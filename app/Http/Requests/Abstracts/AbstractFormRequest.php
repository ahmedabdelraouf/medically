<?php

namespace App\Http\Requests\Abstracts;

use App\Http\Traits\ResponseTraits;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Http\JsonResponse;
use Symfony\Component\HttpFoundation\Response;

abstract class AbstractFormRequest extends FormRequest
{
    use ResponseTraits;

    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * @param Validator $validator
     * @return JsonResponse|void
     */
    protected function failedValidation(Validator $validator)
    {
        $errors = $validator->getMessageBag()->first();//to get first validation error only.
        if ($this->wantsJson() || $this->acceptsJson()) {
            throw new HttpResponseException($this->prepareApiResponse(
                true, $validator->getMessageBag()->first(),
                trans('validation.data_validation_error'),
                $validator->getMessageBag(), Response::HTTP_UNPROCESSABLE_ENTITY,
                Response::HTTP_UNPROCESSABLE_ENTITY, 0, null));
        } else {
            parent::failedValidation($validator); // TODO: Change the autogenerated stub
        }
        throw new HttpResponseException(response()->json(['errors' => $errors],
            JsonResponse::HTTP_UNPROCESSABLE_ENTITY));
    }


}
